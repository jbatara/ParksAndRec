// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ParksAndRecAPI.Models;

namespace ParksAndRecAPI.Migrations
{
    [DbContext(typeof(ParksAndRecDbContext))]
    [Migration("20191103233132_AddEmployeeToAPIKey")]
    partial class AddEmployeeToAPIKey
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ParksAndRecAPI.Models.ApiKey", b =>
                {
                    b.Property<int>("ApiKeyId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("APIKey")
                        .IsRequired();

                    b.Property<int>("DepartmentId");

                    b.Property<string>("EmployeeFirst")
                        .IsRequired();

                    b.Property<string>("EmployeeLast")
                        .IsRequired();

                    b.HasKey("ApiKeyId");

                    b.ToTable("ApiKeys");
                });

            modelBuilder.Entity("ParksAndRecAPI.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("City");

                    b.Property<string>("DepartmentHead_FirstName")
                        .IsRequired();

                    b.Property<string>("DepartmentHead_LasetName")
                        .IsRequired();

                    b.Property<string>("DepartmentName")
                        .IsRequired();

                    b.Property<string>("State");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            DepartmentId = 1,
                            DepartmentHead_FirstName = "Kristine",
                            DepartmentHead_LasetName = "Stratton",
                            DepartmentName = "National Recreation and Park Association"
                        },
                        new
                        {
                            DepartmentId = 2,
                            DepartmentHead_FirstName = "Ron",
                            DepartmentHead_LasetName = "Swanson",
                            DepartmentName = "Pawnee Parks and Recreation Department"
                        },
                        new
                        {
                            DepartmentId = 3,
                            DepartmentHead_FirstName = "First",
                            DepartmentHead_LasetName = "Last",
                            DepartmentName = "Eagleton Parks and Recreation Department"
                        });
                });

            modelBuilder.Entity("ParksAndRecAPI.Models.Park", b =>
                {
                    b.Property<int>("ParkId")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Acres");

                    b.Property<string>("Address");

                    b.Property<string>("City");

                    b.Property<int>("DepartmentId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("State");

                    b.Property<int>("YearFounded");

                    b.Property<int>("ZipCode");

                    b.HasKey("ParkId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Parks");

                    b.HasData(
                        new
                        {
                            ParkId = 1,
                            Acres = 0.0,
                            DepartmentId = 2,
                            Name = "Pwnee Commons",
                            YearFounded = 1986,
                            ZipCode = 0
                        },
                        new
                        {
                            ParkId = 2,
                            Acres = 0.0,
                            DepartmentId = 2,
                            Name = "Harvey James Park",
                            YearFounded = 0,
                            ZipCode = 0
                        },
                        new
                        {
                            ParkId = 3,
                            Acres = 0.0,
                            DepartmentId = 2,
                            Name = "Lafayette Park",
                            YearFounded = 0,
                            ZipCode = 0
                        },
                        new
                        {
                            ParkId = 4,
                            Acres = 0.0,
                            DepartmentId = 3,
                            Name = "Eagleton Park",
                            YearFounded = 0,
                            ZipCode = 0
                        },
                        new
                        {
                            ParkId = 5,
                            Acres = 0.0,
                            DepartmentId = 2,
                            Name = "Maplewood Park",
                            YearFounded = 0,
                            ZipCode = 0
                        },
                        new
                        {
                            ParkId = 6,
                            Acres = 0.0,
                            DepartmentId = 2,
                            Name = "North Pawnee Recreation Center",
                            YearFounded = 0,
                            ZipCode = 0
                        },
                        new
                        {
                            ParkId = 7,
                            Acres = 0.0,
                            DepartmentId = 2,
                            Name = "Wamapokestone Park",
                            YearFounded = 0,
                            ZipCode = 0
                        },
                        new
                        {
                            ParkId = 8,
                            Acres = 0.0,
                            DepartmentId = 2,
                            Name = "Tucker Park",
                            YearFounded = 0,
                            ZipCode = 0
                        },
                        new
                        {
                            ParkId = 9,
                            Acres = 0.0,
                            DepartmentId = 2,
                            Name = "Pawnee Park: Smallest Park in Indiana",
                            YearFounded = 0,
                            ZipCode = 0
                        },
                        new
                        {
                            ParkId = 10,
                            Acres = 0.0,
                            DepartmentId = 2,
                            Name = "Slippery Elm Park",
                            YearFounded = 0,
                            ZipCode = 0
                        },
                        new
                        {
                            ParkId = 11,
                            Acres = 0.0,
                            DepartmentId = 2,
                            Name = "Ramsett Park",
                            YearFounded = 0,
                            ZipCode = 0
                        });
                });

            modelBuilder.Entity("ParksAndRecAPI.Models.Park", b =>
                {
                    b.HasOne("ParksAndRecAPI.Models.Department", "Department")
                        .WithMany("Parks")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
